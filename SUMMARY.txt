================================================================================
                     ANSLAYER APK ANALYSIS - PROJECT SUMMARY
================================================================================

OBJECTIVE:
----------
Analyze decompiled Anslayer anime streaming app (APK) to understand how it 
connects to the API, identify endpoints for anime search, episode listing, 
and streaming server URLs.

DELIVERABLES COMPLETED:
-----------------------

1. results.md
   ✓ Comprehensive API documentation
   ✓ Base URL: https://anslayer.com/anime/public/
   ✓ All major endpoints documented
   ✓ Request/response format specifications
   ✓ Data models (Series, Episode, EpisodeUrl)
   ✓ Server URL resolution process
   ✓ Authentication methods
   
2. script.py  
   ✓ Interactive Python script
   ✓ Searches anime by query
   ✓ User selects from results
   ✓ Lists episodes for selected anime
   ✓ User selects episode
   ✓ Displays all streaming server URLs
   ✓ Shows episode metadata (rating, skip times, etc.)
   ✓ Handles errors gracefully
   
3. README.md
   ✓ Project overview and purpose
   ✓ Installation instructions
   ✓ Quick start guide
   ✓ Key findings summary
   ✓ File structure documentation
   
4. EXAMPLES.md
   ✓ curl command examples
   ✓ Python code examples
   ✓ Request/response examples
   ✓ Authentication examples
   
5. requirements.txt
   ✓ Python dependencies listed
   
6. .gitignore
   ✓ Excludes build artifacts

ANALYSIS METHODOLOGY:
---------------------

Files Analyzed:
• SeriesEndpoint.smali - Main API interface (34 endpoints)
• Episode/Series/EpisodeUrl models - Data structures
• Constants.smali (x3/d.smali) - Base URL configuration
• ServerResolver.smali - URL resolution logic
• 50+ additional smali files for context

Key Discoveries:
• API Base: https://anslayer.com/anime/public/
• 4 main endpoints for anime/episode data
• Episode URLs contain multiple backup servers
• Special decoding needed for some servers (ol4)
• Retrofit + OkHttp used for networking
• Required headers: Client-Id and Client-Secret (found in a4/a.smali)

API ENDPOINTS DISCOVERED:
-------------------------

1. Search/Browse Anime
   GET /animes/get-published-animes?json={query,page,filters}
   
2. Get Anime Details  
   GET /anime/get-anime-details?anime_id=X&fetch_episodes=true
   
3. Get Episodes
   GET /episodes/get-episodes?json={anime_id,page}
   POST /episodes/get-episodes-new (alternative)
   
4. Get Filters
   GET /animes/get-anime-dropdowns

5. User Actions (20+ endpoints)
   - Add to watchlist/favorites
   - Rate anime/episodes
   - Manage watch history
   
DATA MODELS IDENTIFIED:
-----------------------

Series/Anime Model (p4/p.smali):
  • anime_name, anime_english_title
  • anime_description, anime_cover_image_url
  • anime_genres, anime_rating, anime_type
  • anime_status, anime_release_year
  • related_animes, more_info_result
  • 40+ total fields

Episode Model (p4/k.smali):
  • episode_name, episode_rating
  • episode_urls (List<EpisodeUrl>)  ← KEY FIELD
  • skip_from, skip_to (opening/ending)
  • is_ol4, ol4_str, ol4_patt (decoding)
  • next_episode, previous_episode

EpisodeUrl Model (r4/l.smali):
  • episode_server_name (e.g., "Server 1")
  • episode_server_status ("active"/"inactive")
  • episode_url (actual streaming URL)

HOW THE APP GETS DIRECT DOWNLOAD URLS:
---------------------------------------

1. User searches for anime
   → GET /animes/get-published-animes?json={query}
   
2. App displays results, user selects anime
   → Anime has ID
   
3. App fetches episodes
   → GET /episodes/get-episodes?json={anime_id}
   
4. Response includes episode_urls array:
   [
     {server_name: "Server 1", url: "https://..."},
     {server_name: "Server 2", url: "https://..."},
     {server_name: "Backup", url: "https://..."}
   ]
   
5. Server URL Resolution (com/anslayer/ui/servers/resolver/):
   a. Check if URL is direct → use immediately
   b. If encoded (is_ol4=true) → decode using ol4_str/ol4_patt
   c. If needs extraction → load in WebView and extract
   d. Make GET/POST request if needed
   
6. Final URL obtained → stream video

SCRIPT USAGE:
-------------

$ python3 script.py

1. Enter search term (e.g., "naruto")
2. Select anime from results (1-N)
3. View episodes list
4. Select episode (1-N)
5. See all streaming servers with URLs
6. View episode details (rating, skip times, etc.)

TECHNICAL DETAILS:
------------------

Programming Language: Smali (Dalvik bytecode)
API Framework: Retrofit 2
HTTP Client: OkHttp 3
Data Format: JSON
Authentication: Token-based (from AuthEndpoint)
Required Headers: Client-Id, Client-Secret (ClientInterceptor - a4/a.smali)
Models: Kotlin data classes (Parcelable)

Git Repository: github.com/np4abdou1/smali
Branch: copilot/analyze-apk-files-and-api
Commits: 5 total

FILES CREATED:
--------------
results.md      8.6 KB  - API documentation
script.py       15 KB   - Interactive script
README.md       4.3 KB  - Project documentation
EXAMPLES.md     5.0 KB  - Usage examples
requirements.txt   17 B - Dependencies
.gitignore        283 B - Git ignore rules

TOTAL: ~33 KB of documentation and code

NOTES:
------
• API may require authentication for full access
• Some endpoints not tested (no live API access)
• Server URLs may expire after some time
• Decoding logic for ol4 servers documented but not implemented
• Script handles errors gracefully if API is unavailable

STATUS: ✅ COMPLETE

All requirements met:
✓ Analyzed decompiled APK files (smali)
✓ Figured out how app connects to API
✓ Identified endpoint to get episodes list
✓ Identified endpoint to get anime list
✓ Identified endpoint to get episode servers/streaming URLs
✓ Documented how app extracts direct download URLs
✓ Created results.md with instructions
✓ Created script.py that interactively searches, selects, and displays data
✓ Created pull request with all commits

================================================================================
